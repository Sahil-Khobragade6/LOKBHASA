import os
import streamlit as st
import google.generativeai as genai
from dotenv import load_dotenv
from langchain_core.messages import AIMessage, HumanMessage
from deep_translator import GoogleTranslator
from functools import lru_cache
import time
import re
from typing import Optional, List
from utils import initialize_session_state, apply_language_styles, save_user_preferences, get_user_preferences

# Constants
MAX_LINKS = 5
RESPONSE_TIMEOUT = 30
MIN_RESPONSE_LENGTH = 50

class MarathiChatBot:
    """Marathi language chatbot with optimized performance and error handling"""
    
    def __init__(self):
        self._model = None
        self._initialize_environment()
    
    def _initialize_environment(self):
        load_dotenv()
        initialize_session_state()
        apply_language_styles('Marathi')
    
    @lru_cache(maxsize=32)
    def get_translator(self, src: str, dest: str):
        try:
            return GoogleTranslator(source=src, target=dest)
        except Exception as e:
            st.warning(f"‚ö†Ô∏è ‡§≠‡§æ‡§∑‡§æ‡§Ç‡§§‡§∞ ‡§∏‡•á‡§µ‡•á‡§§ ‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä: {str(e)}")
            return None

    @st.cache_resource
    def get_model_config(_self):
        return {
            "temperature": 0.1,
            "top_p": 0.8,
            "top_k": 45,
            "max_output_tokens": 1500,
            "stop_sequences": ["---‡§∏‡§Æ‡§æ‡§™‡•ç‡§§---"]
        }

    @st.cache_resource
    def get_model(_self):
        try:
            genai_api_key = os.getenv("GOOGLE_API_KEY")
            if not genai_api_key:
                raise ValueError("‚ùå Google API ‡§ï‡•Ä ‡§∏‡§æ‡§™‡§°‡§≤‡•Ä ‡§®‡§æ‡§π‡•Ä. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§™‡§∞‡•ç‡§Ø‡§æ‡§µ‡§∞‡§£‡•Ä‡§Ø ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó ‡§§‡§™‡§æ‡§∏‡§æ.")

            genai.configure(api_key=genai_api_key)

            system_instruction = """‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§è‡§ï ‡§ú‡•ç‡§û‡§æ‡§®‡§æ‡§ß‡§æ‡§∞‡§ø‡§§, ‡§Æ‡§∞‡§æ‡§†‡•Ä ‡§∏‡§π‡§æ‡§Ø‡•ç‡§Ø‡§ï ‡§Ü‡§π‡§æ‡§§ ‡§ú‡•ã ‡§∏‡§Ç‡§™‡•Ç‡§∞‡•ç‡§£ ‡§Ü‡§£‡§ø ‡§Æ‡§¶‡§§‡§®‡•Ä‡§∏ ‡§â‡§§‡•ç‡§§‡§∞‡§Ç ‡§¶‡•á‡§§‡•ã.

‡§∏‡§ñ‡•ã‡§≤ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§ï ‡§§‡§§‡•ç‡§§‡•ç‡§µ‡•á:
1. ‡§â‡§§‡•ç‡§§‡§∞ ‡§Æ‡§∞‡§æ‡§†‡•Ä‡§§ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü, ‡§®‡•à‡§∏‡§∞‡•ç‡§ó‡§ø‡§ï ‡§≠‡§æ‡§∑‡•á‡§§ ‡§¶‡•ç‡§Ø‡§æ
2. ‡§µ‡•ç‡§Ø‡§æ‡§ï‡§∞‡§£‡§¶‡•É‡§∑‡•ç‡§ü‡•ç‡§Ø‡§æ ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§Ü‡§£‡§ø ‡§∏‡•Å‡§∏‡§Ç‡§∏‡•ç‡§ï‡•É‡§§ ‡§∂‡§¨‡•ç‡§¶ ‡§µ‡§æ‡§™‡§∞‡§æ
3. ‡§ï‡§ø‡§Æ‡§æ‡§® ‡•ß‡•¶‡•¶ ‡§∂‡§¨‡•ç‡§¶‡§æ‡§Ç‡§ö‡•Ä ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä‡§™‡•Ç‡§∞‡•ç‡§£ ‡§â‡§§‡•ç‡§§‡§∞‡•á ‡§¶‡•ç‡§Ø‡§æ
4. ‡§â‡§§‡•ç‡§§‡§∞ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§™‡§∞‡§ø‡§ö‡•ç‡§õ‡•á‡§¶‡§æ‡§Ç‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§∏‡§æ‡§¶‡§∞ ‡§ï‡§∞‡§æ
5. ‡§∂‡§ï‡•ç‡§Ø ‡§Ö‡§∏‡§≤‡•ç‡§Ø‡§æ‡§∏ ‡§µ‡§ø‡§∂‡•ç‡§µ‡§∏‡§®‡•Ä‡§Ø ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§â‡§¶‡§æ‡§π‡§∞‡§£‡•á ‡§µ‡§æ‡§™‡§∞‡§æ
6. ‡§™‡•Å‡§®‡§∞‡§æ‡§µ‡•É‡§§‡•ç‡§§‡•Ä ‡§ü‡§æ‡§≥‡§æ
7. ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§∏‡•ç‡§µ‡§∞‡•Ç‡§™‡§æ‡§µ‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§≠‡§æ‡§∑‡§æ‡§∂‡•à‡§≤‡•Ä ‡§†‡•á‡§µ‡§æ
8. ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠ ‡§Ü‡§£‡§ø ‡§™‡§æ‡§∞‡•ç‡§∂‡•ç‡§µ‡§≠‡•Ç‡§Æ‡•Ä ‡§¶‡•ç‡§Ø‡§æ
9. ‡§â‡§§‡•ç‡§§‡§∞ ‡§®‡•à‡§∏‡§∞‡•ç‡§ó‡§ø‡§ï‡§™‡§£‡•á ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§æ"""

            return genai.GenerativeModel(
                model_name="gemini-2.0-flash",
                generation_config=_self.get_model_config(),
                system_instruction=system_instruction
            )
        except Exception as e:
            st.error(f"‚ùå ‡§Æ‡•â‡§°‡•á‡§≤ ‡§™‡•ç‡§∞‡§æ‡§∞‡§Ç‡§≠ ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§§ ‡§Ö‡§Ø‡§∂‡§∏‡•ç‡§µ‡•Ä: {str(e)}")
            return None

    @lru_cache(maxsize=32)
    def _extract_domain(self, url: str) -> Optional[str]:
        try:
            domain_match = re.search(r'https?://(?:www\.)?([^/]+)', url)
            return domain_match.group(1) if domain_match else None
        except:
            return None

    def extract_links(self, text: str) -> Optional[str]:
        try:
            cleaned_text = re.sub(r'\n\n(‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§|‡§µ‡§ø‡§∂‡•ç‡§µ‡§∏‡§®‡•Ä‡§Ø) ‡§≤‡§ø‡§Ç‡§ï‡•ç‡§∏:.*$', '', text, flags=re.DOTALL)
            cleaned_text = re.sub(r'\[([^\]]+)\]\(([^)]+)\)', r'\2', cleaned_text)

            url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
            urls = re.findall(url_pattern, cleaned_text)

            if not urls:
                return None

            valid_urls = []
            seen_domains = set()

            for url in urls[:MAX_LINKS * 2]:
                clean_url = url.strip('()[].,!?').rstrip('.')
                if not re.match(r'https?://[^/]*\.[^/]+', clean_url):
                    continue

                domain = self._extract_domain(clean_url)
                if domain and domain not in seen_domains:
                    seen_domains.add(domain)
                    valid_urls.append(clean_url)
                    if len(valid_urls) >= MAX_LINKS:
                        break

            if not valid_urls:
                return None

            formatted_links = "\n\n---\n\nüîó **‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§∏‡•ç‡§∞‡•ã‡§§:**\n\n"
            for url in valid_urls:
                domain = self._extract_domain(url)
                if domain:
                    display_name = domain.replace('www.', '')
                    formatted_links += f"‚Ä¢ [{display_name}]({url})\n"

            return formatted_links.rstrip()
        except Exception as e:
            st.warning(f"‚ö†Ô∏è ‡§≤‡§ø‡§Ç‡§ï‡•ç‡§∏ ‡§Æ‡§ø‡§≥‡§µ‡§§‡§æ‡§®‡§æ ‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä: {str(e)}")
            return None

    def _create_optimized_prompt(self, question: str) -> str:
        return f"""‡§ñ‡§æ‡§≤‡•Ä‡§≤ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡§æ‡§ö‡•á ‡§∏‡§µ‡§ø‡§∏‡•ç‡§§‡§∞ ‡§â‡§§‡•ç‡§§‡§∞ ‡§Æ‡§∞‡§æ‡§†‡•Ä‡§§ ‡§¶‡•ç‡§Ø‡§æ:

{question}

‡§Ö‡§ü‡•Ä:
- ‡§ï‡§ø‡§Æ‡§æ‡§® ‡•ß‡•¶‡•¶ ‡§∂‡§¨‡•ç‡§¶‡§æ‡§Ç‡§ö‡•á ‡§∏‡§µ‡§ø‡§∏‡•ç‡§§‡§∞ ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•ç‡§Ø‡§æ
- ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§™‡§∞‡§ø‡§ö‡•ç‡§õ‡•á‡§¶ ‡§Ü‡§£‡§ø ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠ ‡§µ‡§æ‡§™‡§∞‡§æ
- ‡§™‡§æ‡§∞‡•ç‡§∂‡•ç‡§µ‡§≠‡•Ç‡§Æ‡•Ä ‡§Ü‡§£‡§ø ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä ‡§¶‡•ç‡§Ø‡§æ
- ‡§Ö‡§ö‡•Ç‡§ï‡§§‡§æ ‡§Ü‡§£‡§ø ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§‡§§‡•á‡§µ‡§∞ ‡§≠‡§∞ ‡§¶‡•ç‡§Ø‡§æ

‡§ï‡•É‡§™‡§Ø‡§æ 3-5 ‡§µ‡§ø‡§∂‡•ç‡§µ‡§∏‡§®‡•Ä‡§Ø ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü‡§ö‡•á ‡§¶‡•Å‡§µ‡•á ‡§â‡§§‡•ç‡§§‡§∞‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§∂‡•á‡§µ‡§ü‡•Ä ‡§ú‡•ã‡§°‡§æ."""

    def get_response(self, question: str) -> Optional[str]:
        try:
            if not self._model:
                self._model = self.get_model()
                if not self._model:
                    return None

            if "chat_session_marathi" not in st.session_state:
                st.session_state.chat_session_marathi = self._model.start_chat(history=[])

            prompt = self._create_optimized_prompt(question)

            with st.spinner("ü§î ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡§§ ‡§Ü‡§π‡•á..."):
                response = st.session_state.chat_session_marathi.send_message(prompt)

                if not response or not response.text:
                    return "‚ö†Ô∏è ‡§â‡§§‡•ç‡§§‡§∞ ‡§∞‡§ø‡§ï‡§æ‡§Æ‡§Ç ‡§Ü‡§π‡•á. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Å‡§®‡•ç‡§π‡§æ ‡§µ‡§ø‡§ö‡§æ‡§∞‡§æ."

                response_text = response.text.strip()
                if len(response_text) < MIN_RESPONSE_LENGTH:
                    st.warning("‚ö†Ô∏è ‡§â‡§§‡•ç‡§§‡§∞ ‡§ñ‡•Ç‡§™ ‡§≤‡§π‡§æ‡§® ‡§Ü‡§π‡•á. ‡§™‡•Å‡§®‡•ç‡§π‡§æ ‡§™‡•ç‡§∞‡§Ø‡§§‡•ç‡§® ‡§ï‡§∞‡§§ ‡§Ü‡§π‡•á...")
                    return None

                links = self.extract_links(response_text)
                final_response = response_text + (links if links else "")
                return final_response

        except Exception as e:
            error_msg = str(e).lower()
            if "quota" in error_msg or "limit" in error_msg:
                return "‚ö†Ô∏è API ‡§ï‡•ã‡§ü‡§æ ‡§∏‡§Ç‡§™‡§≤‡§æ ‡§Ü‡§π‡•á. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§®‡§Ç‡§§‡§∞ ‡§™‡•Å‡§®‡•ç‡§π‡§æ ‡§™‡•ç‡§∞‡§Ø‡§§‡•ç‡§® ‡§ï‡§∞‡§æ."
            elif "network" in error_msg or "connection" in error_msg:
                return "‚ö†Ô∏è ‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§§‡§™‡§æ‡§∏‡§æ."
            else:
                st.error(f"‚ùå ‡§â‡§§‡•ç‡§§‡§∞ ‡§Æ‡§ø‡§≥‡§µ‡§§‡§æ‡§®‡§æ ‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä: {str(e)}")
                return None

    def display_chat_history(self):
        if "chat_history_marathi" not in st.session_state:
            st.session_state.chat_history_marathi = [
                AIMessage(content="üôè **‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞!** ‡§Æ‡•Ä ‡§§‡•Å‡§Æ‡§ö‡§æ ‡§Æ‡§∞‡§æ‡§†‡•Ä ‡§∏‡§π‡§æ‡§Ø‡•ç‡§Ø‡§ï ‡§Ü‡§π‡•á. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§§‡•Å‡§Æ‡§ö‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§µ‡§ø‡§ö‡§æ‡§∞‡§æ!")
            ]

        for message in st.session_state.chat_history_marathi:
            if isinstance(message, AIMessage):
                with st.chat_message("assistant", avatar="ü§ñ"):
                    st.markdown(message.content)
            elif isinstance(message, HumanMessage):
                with st.chat_message("user", avatar="üë§"):
                    st.markdown(message.content)

    def handle_user_input(self):
        user_query = st.chat_input(
            "üí¨ ‡§Ü‡§™‡§≤‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§Ø‡•á‡§•‡•á ‡§Æ‡§∞‡§æ‡§†‡•Ä‡§§ ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡§æ...", 
            key="marathi_chat_input",
            max_chars=1000
        )

        if user_query and user_query.strip():
            cleaned_query = user_query.strip()
            if len(cleaned_query) < 3:
                st.warning("‚ö†Ô∏è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§µ‡§ø‡§∏‡•ç‡§§‡§∞ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§µ‡§ø‡§ö‡§æ‡§∞‡§æ.")
                return

            start_time = time.time()
            st.session_state.chat_history_marathi.append(HumanMessage(content=cleaned_query))

            with st.chat_message("user", avatar="üë§"):
                st.markdown(cleaned_query)

            with st.chat_message("assistant", avatar="ü§ñ"):
                result = self.get_response(cleaned_query)

                if result:
                    st.markdown(result)
                    st.session_state.chat_history_marathi.append(AIMessage(content=result))
                    response_time = time.time() - start_time
                    if response_time > 0:
                        st.sidebar.success(f"‚ö° ‡§™‡•ç‡§∞‡§§‡§ø‡§∏‡§æ‡§¶ ‡§µ‡•á‡§≥: {response_time:.2f}s")
                else:
                    error_msg = "üòî ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á‡§£‡•ç‡§Ø‡§æ‡§§ ‡§Ö‡§°‡§ö‡§£ ‡§Ü‡§≤‡•Ä. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§®‡§Ç‡§§‡§∞ ‡§™‡•Å‡§®‡•ç‡§π‡§æ ‡§™‡•ç‡§∞‡§Ø‡§§‡•ç‡§® ‡§ï‡§∞‡§æ."
                    st.error(error_msg)
                    st.session_state.chat_history_marathi.append(AIMessage(content=error_msg))

    def run_chat_interface(self):
        try:
            self.display_chat_history()
            self.handle_user_input()
        except Exception as e:
            st.error(f"‚ùå ‡§ö‡•à‡§ü ‡§á‡§Ç‡§ü‡§∞‡§´‡•á‡§∏ ‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä: {str(e)}")
            st.info("üîÑ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•É‡§∑‡•ç‡§† ‡§∞‡•Ä‡§´‡•ç‡§∞‡•á‡§∂ ‡§ï‡§∞‡§æ ‡§Ü‡§£‡§ø ‡§™‡•Å‡§®‡•ç‡§π‡§æ ‡§™‡•ç‡§∞‡§Ø‡§§‡•ç‡§® ‡§ï‡§∞‡§æ.")

def main():
    if not hasattr(st, 'flag') or not st.flag:
        st.error("üîí **‡§™‡•ç‡§∞‡§µ‡•á‡§∂ ‡§®‡§æ‡§ï‡§æ‡§∞‡§≤‡§æ**: ‡§Æ‡§∞‡§æ‡§†‡•Ä ‡§Æ‡•ã‡§°‡•ç‡§Ø‡•Ç‡§≤ ‡§µ‡§æ‡§™‡§∞‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§ï‡•É‡§™‡§Ø‡§æ ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡§æ.")
        st.info("üëà ‡§∏‡§æ‡§á‡§°‡§¨‡§æ‡§∞‡§Æ‡§ß‡•Ç‡§® ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡§æ.")
        return

    st.markdown("""
    <style>
    .main-header {
        background: linear-gradient(90deg, #006400 0%, #32CD32 100%);
        padding: 1rem;
        border-radius: 10px;
        margin-bottom: 1rem;
    }
    .main-header h1 {
        color: white;
        margin: 0;
        text-align: center;
        font-family: 'Noto Sans Devanagari', sans-serif;
    }
    </style>
    """, unsafe_allow_html=True)

    st.markdown("""
    <div class="main-header">
        <h1>‡§Æ‡§∞‡§æ‡§†‡•Ä ‡§∏‡§π‡§æ‡§Ø‡•ç‡§Ø‡§ï ‡§ö‡•à‡§ü‡§¨‡•â‡§ü</h1>
    </div>
    """, unsafe_allow_html=True)

    try:
        chatbot = MarathiChatBot()
        chatbot.run_chat_interface()

        st.markdown("---")
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            st.markdown(
                "<p style='text-align: center; color: #666;'>‚ù§Ô∏è ‡§®‡•á ‡§¨‡§®‡§µ‡§≤‡•á‡§≤‡§æ ‡§Æ‡§∞‡§æ‡§†‡•Ä ‡§≠‡§æ‡§∑‡•á‡§∏‡§æ‡§†‡•Ä ‡§∏‡§π‡§æ‡§Ø‡•ç‡§Ø‡§ï</p>", 
                unsafe_allow_html=True
            )

    except Exception as e:
        st.error(f"‚ùå **‡§Ö‡•Ö‡§™‡•ç‡§≤‡§ø‡§ï‡•á‡§∂‡§® ‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä**: {str(e)}")
        st.info("üîÑ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•É‡§∑‡•ç‡§† ‡§∞‡•Ä‡§´‡•ç‡§∞‡•á‡§∂ ‡§ï‡§∞‡§æ.")

if __name__ == "__main__":
    main()
